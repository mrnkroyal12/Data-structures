#include <stdio.h>
#include <stdlib.h>
#include <stdbool.h>

// Define a structure for a node in the linked list
struct Node {
    int data;
    struct Node* next;
};

// Define a structure for the circular queue
struct CircularQueue {
    struct Node* front;
    struct Node* rear;
};

// Function to initialize the circular queue
void initializeQueue(struct CircularQueue* queue) {
    queue->front = NULL;
    queue->rear = NULL;
}

// Function to check if the circular queue is empty
bool isEmpty(struct CircularQueue* queue) {
    return (queue->front == NULL);
}

// Function to enqueue an element into the circular queue
void enqueue(struct CircularQueue* queue, int value) {
    // Create a new node
    struct Node* newNode = (struct Node*)malloc(sizeof(struct Node));
    if (newNode == NULL) {
        printf("Memory allocation failed. Enqueue operation failed.\n");
        return;
    }

    newNode->data = value;
    newNode->next = NULL;

    // If the queue is empty, set both front and rear to the new node
    if (isEmpty(queue)) {
        queue->front = newNode;
        queue->rear = newNode;
    } else {
        // Otherwise, update the rear and link the last node to the new node
        queue->rear->next = newNode;
        queue->rear = newNode;
    }

    printf("Enqueued %d\n", value);
}

// Function to dequeue an element from the circular queue
void dequeue(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Circular Queue is empty. Dequeue operation failed.\n");
        return;
    }

    // Remove the front node and update the front pointer
    struct Node* temp = queue->front;
    queue->front = queue->front->next;

    // If the queue becomes empty after dequeue, update the rear pointer as well
    if (queue->front == NULL) {
        queue->rear = NULL;
    }

    printf("Dequeued %d\n", temp->data);
    free(temp);
}

// Function to display the elements of the circular queue
void display(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Circular Queue is empty.\n");
        return;
    }

    printf("Circular Queue elements: ");
    struct Node* current = queue->front;
    do {
        printf("%d ", current->data);
        current = current->next;
    } while (current != NULL);

    printf("\n");
}

// Function to get the front (peek) element of the circular queue
int front(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Circular Queue is empty. Front operation failed.\n");
        return -1; // Return a default value or handle it appropriately
    }

    return queue->front->data;
}

// Function to get the rear element of the circular queue
int rear(struct CircularQueue* queue) {
    if (isEmpty(queue)) {
        printf("Circular Queue is empty. Rear operation failed.\n");
        return -1; // Return a default value or handle it appropriately
    }

    return queue->rear->data;
}

int main() {
    struct CircularQueue myCircularQueue;
    initializeQueue(&myCircularQueue);

    enqueue(&myCircularQueue, 10);
    enqueue(&myCircularQueue, 20);
    enqueue(&myCircularQueue, 30);
    display(&myCircularQueue);

    printf("Front element: %d\n", front(&myCircularQueue));
    printf("Rear element: %d\n", rear(&myCircularQueue));

    dequeue(&myCircularQueue);
    display(&myCircularQueue);

    return 0;
}
